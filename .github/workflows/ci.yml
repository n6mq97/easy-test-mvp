name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: "postgresql://user:password@localhost:5432/testdb"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: back/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('back/poetry.lock') }}
    
    - name: Install dependencies
      working-directory: ./back
      run: poetry install --with dev
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Run database migrations
      working-directory: ./back
      run: |
        poetry run alembic upgrade head
      env:
        DATABASE_URL: "postgresql://user:password@localhost:5432/testdb"
    
    - name: Run tests
      working-directory: ./back
      run: poetry run pytest

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
    
    - name: Install dependencies
      working-directory: ./front
      run: npm ci
    
    - name: Run tests
      working-directory: ./front
      run: npm run test:run
    
    - name: Run linting
      working-directory: ./front
      run: npm run lint
    
    - name: Build
      working-directory: ./front
      run: npm run build

  deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    name: Deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Starting production deployment..."
        
        # Create SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add server to known_hosts
        ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
        
        # Set environment variables for deployment
        export PROD_DB_USER="${{ secrets.PROD_DB_USER }}"
        export PROD_DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
        export PROD_DB_NAME="${{ secrets.PROD_DB_NAME }}"
        export PROD_API_URL="${{ secrets.PROD_API_URL }}"
        export PROD_DOMAIN="${{ secrets.PROD_DOMAIN }}"
        
        # Copy deployment script to server
        scp scripts/deploy.sh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/tmp/deploy.sh
        
        # Execute deployment on server
        ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
          set -e
          export PROD_DB_USER="$PROD_DB_USER"
          export PROD_DB_PASSWORD="$PROD_DB_PASSWORD"
          export PROD_DB_NAME="$PROD_DB_NAME"
          export PROD_API_URL="$PROD_API_URL"
          export PROD_DOMAIN="$PROD_DOMAIN"
          
          chmod +x /tmp/deploy.sh
          /tmp/deploy.sh
          
          # Cleanup
          rm /tmp/deploy.sh
        EOF
        
        echo "âœ… Production deployment completed successfully!"
